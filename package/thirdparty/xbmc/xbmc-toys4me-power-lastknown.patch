From 079f50d2c3d039d3e44230f782d73b7064eda93a Mon Sep 17 00:00:00 2001
From: toys4me <toys4me@fake.server>
Date: Mon, 4 Mar 2013 10:25:10 -0800
Subject: [PATCH] Custom Updates

---
 xbmc/powermanagement/linux/PivosPowerSyscall.cpp | 51 +++++++++++++++++-
 xbmc/settings/Settings.cpp                       | 69 ++++++++++++++++++++++++
 2 files changed, 119 insertions(+), 1 deletion(-)

diff --git a/xbmc/powermanagement/linux/PivosPowerSyscall.cpp b/xbmc/powermanagement/linux/PivosPowerSyscall.cpp
index 7864292..c0a18f7 100644
--- a/xbmc/powermanagement/linux/PivosPowerSyscall.cpp
+++ b/xbmc/powermanagement/linux/PivosPowerSyscall.cpp
@@ -22,6 +22,9 @@
 #include "PivosPowerSyscall.h"
 #include "utils/AMLUtils.h"
 #include "utils/log.h"
+#include <sys/types.h>
+#include <dirent.h>
+
 
 CPivosPowerSyscall::CPivosPowerSyscall()
 {
@@ -98,6 +101,52 @@ bool CPivosPowerSyscall::PumpPowerEvents(IPowerEventsCallback *callback)
     m_OnSuspend = false;
     // wait for all our threads to do their thing
     usleep(1 * 1000 * 1000);
+
+    // Synchronize file system
+    std::string cmd;
+    cmd = "sync";
+    system(cmd.c_str());
+
+    // FIXME--------------
+    // In hindsight this shouldn't be done here, as its to static
+    // Should move shutdown (umount, etc) to an external script
+    // Then build a script to handle remounting on resume.
+    // FIXME--------------
+
+    // Dismount all usb drives
+    DIR           *d;
+    struct dirent *dir;
+    char  * device_path;
+    d = opendir("/dev/disk/by-path");
+    
+
+    if (d)
+    {
+    CLog::Log(LOGINFO, "Suspending: Find usb\n");
+    while ((dir = readdir(d)) != NULL)
+    {
+      CLog::Log(LOGINFO, "Suspending: loop %s\n",dir->d_name);
+      if (strncmp(dir->d_name,"usb",3) == 0)
+        {
+		 cmd="/dev/disk/by-path/";
+		 device_path = realpath(cmd.append(dir->d_name).c_str(),NULL);
+                 if (device_path != NULL)
+		 {
+                 CLog::Log(LOGINFO, "Suspending: umount %s\n", device_path);
+                 
+                 // snprintf(cmd,100,"umount %s\n",device_path);
+                 cmd = "umount ";
+                 cmd.append(device_path);
+                 system(cmd.c_str());
+		 free(device_path);
+                 }
+        }
+    }
+
+    closedir(d);
+    }
+
+    // Sleep
     aml_set_sysfs_str("/sys/power/state", "mem");
     usleep(100 * 1000);
   }
diff --git a/xbmc/settings/Settings.cpp b/xbmc/settings/Settings.cpp
index 76fe784..c377abe 100644
--- a/xbmc/settings/Settings.cpp
+++ b/xbmc/settings/Settings.cpp
@@ -172,6 +172,47 @@ bool CSettings::Load()
   CLog::Log(LOGNOTICE, "loading %s", GetSettingsFile().c_str());
   if (!LoadSettings(GetSettingsFile()))
   {
+	CLog::Log(LOGERROR, "Unable to load %s file, appears to be bad", GetSettingsFile().c_str());
+    // Move bad settings file to ".bad"
+	// Delete old ".bad" file if it exists
+	   if (CFile::Exists(GetSettingsFile() + ".bad"))
+		   CFile::Delete(GetSettingsFile() + ".bad");
+	// Rename current file to .bad
+		CFile::Rename(GetSettingsFile(),GetSettingsFile() + ".bad");
+	// Check if lastgood exists so we can restore it
+	if (CFile::Exists(GetSettingsFile() + ".lastgood"))
+	{
+		CLog::Log(LOGERROR, "Trying to restore .lastgood for %s file", GetSettingsFile().c_str());
+		// try to restore lastgood if it exists
+		// we copy instead of rename, so lastgood exist even if this goes bad
+		CFile source_settings, dest_settings;
+		      char * cpybuffer;
+		      int bytes_read;
+		      cpybuffer = (char*) malloc(sizeof(char) * 32768);
+		      if (cpybuffer != NULL)
+		      {
+		    	  if (source_settings.Open(GetSettingsFile() + ".lastgood",0))
+		    	  {
+		    		  if (dest_settings.OpenForWrite(GetSettingsFile()))
+		    		  {
+		    			  while ( (bytes_read = source_settings.Read(cpybuffer, 32768)) > 0 )
+		    			  {
+		    				  dest_settings.Write(cpybuffer,bytes_read);
+		    			  }
+		    			  dest_settings.Close();
+		    		  }
+		    		  source_settings.Close();
+		    		  // Try loading the lastgood backup
+		    		  if ( LoadSettings(GetSettingsFile()) )
+		    		  {
+		    			  CLog::Log(LOGERROR, "System has been restored to last good configuration for %s file", GetSettingsFile().c_str());
+		    			  return true;
+		    		  }
+		    	  }
+		    	  free(cpybuffer);
+		      }
+	 }
+
     CLog::Log(LOGERROR, "Unable to load %s, creating new %s with default values", GetSettingsFile().c_str(), GetSettingsFile().c_str());
     if (!Reset())
       return false;
@@ -817,6 +858,34 @@ bool CSettings::LoadSettings(const CStdString& strSettingsFile)
     CLog::Log(LOGNOTICE, "Disabled debug logging due to GUI setting. Level %d.", g_advancedSettings.m_logLevel);
   }  
   CLog::SetLogLevel(g_advancedSettings.m_logLevel);
+
+  //
+  // Settings file looks good, lets back it up to be safe
+  // back up settings file to what ever its named with a .lastgood extension
+
+      CFile source_settings, dest_settings;
+      char * cpybuffer;
+      int bytes_read;
+
+      cpybuffer = (char*) malloc(sizeof(char) * 32768);
+      if (cpybuffer != NULL)
+      {
+    	  CFile::Delete(strSettingsFile + ".lastgood");
+    	  if (source_settings.Open(strSettingsFile,0))
+    	  {
+    		  if (dest_settings.OpenForWrite(strSettingsFile + ".lastgood"))
+    		  {
+    			  while ( (bytes_read = source_settings.Read(cpybuffer, 32768)) > 0 )
+    			  {
+    				  dest_settings.Write(cpybuffer,bytes_read);
+    			  }
+    			  dest_settings.Close();
+    		  }
+    		  source_settings.Close();
+    	  }
+    	  free(cpybuffer);
+      }
+
   return true;
 }
 
-- 
1.8.1.5

